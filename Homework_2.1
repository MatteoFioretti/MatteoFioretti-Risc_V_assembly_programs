# I set a0 to the most negative number so that when all nodes are negative it will print the least negative.
# I suppose the tree could be empty --> tree: .word 0
.data
	tree: .word root
	root: .word -20,child1,0
	child1: .word -10,child2,sib1            #[value, first_child , sibling]
	sib1: .word -20,child3,sib2
	sib2: .word 0,child4,0
	child2: .word -10,0,sib3
	sib3: .word -1000,0,0
	child3: .word -4,0,0
	child4: .word -100000,0,0 
	
	
.text
	li s0,0 # stores root's adress 
	li t0,0 # stores nodes' adress
	li t1,0 # stores value 
	li t2,0 # compute sum
	li t3,0 # child
	li t4,0 # sibling
	li a0,0 # stores highest sum
	li s4,0 # stores 0 to satisfy condition
	lui a0,0x80000
	la t0,tree
	lw s0,0(t0)
	beq s0,zero,stop # is the tree empty?
	mv t0,s0 
	jal ra func1 # function that recursively access every node
stop:	li a7,1
	ecall
	li a7,10
	ecall
	
	func1:
		beq zero,s4,save # set ra to the right return address
	con2:	mv t5,t0
		jal ra,func2 # function that for every node calculates the sum its tree 
		lw t3,4(t0) # load child
		bnez t3,child # does it have a child?
	check:	lw t4,8(t0) # load sibling
		bnez t4,sib 
		lw t0,0(sp) # load parent address
		beq t0,zero,end # if there is no parent end because it is leaf 
		beq t0,s0,end # it the parent is the root we went through every node
		sw zero,0(sp) 
		addi sp,sp,4
		j check
		
		end:	
		mv ra,s5 # set ra to the right
		jalr zero,ra,0
		
		child:
		addi sp,sp,-4 
		sw t0,0(sp) # save parent address 
		mv t0,t3
		j func1
		
		sib:
		mv t0,t4
		j func1
	
	save: 	mv s5,ra
		addi s4,s4,1
		j con2
		
	func2: 
		mv s2,ra
		lw t1,0(t0)
      continue:	lw t3,4(t0)
		bnez t3,sum
		beq t0,t5,look
		add t2,t2,t1
		j check2
	look: bgt t1,a0,set2 
	      
		done:	
		mul t2,t2,zero # reset t2
		mul t1,t1,zero # reset t1
		mv ra,s2
		jalr zero,ra,0
		set: 
		blt t2,a0,done # check highest sum
		mv a0,t2
		j done
		set2:
		mv a0,t1
		j done	
		
		check2: 	
       		lw t4,8(t0)
		beq t4,zero,goback
		mv t0,t4
		j func2
	
		sum: 
        	lw t1,0(t0) 
        	add t2,t2,t1
        	addi sp,sp,-4
        	sw t0,0(sp)
        	mv t0,t3 
        	j func2
        	
        	goback: 
        	lw t0,0(sp)
        	addi sp,sp,4
        	beq t0,t5,end2
        	lw t1,0(t0)
        	j check2
        	end2: j set
        	
        
		        	 
		             	    

